diff -ru colmap-9999.old/CMakeLists.txt colmap-9999/CMakeLists.txt
--- colmap-9999.old/CMakeLists.txt	2017-08-29 17:25:07.789049045 +0300
+++ colmap-9999/CMakeLists.txt	2017-08-29 17:53:13.426994389 +0300
@@ -57,7 +57,6 @@
 find_package(Boost COMPONENTS
              program_options
              filesystem
-             regex
              system
              unit_test_framework
              REQUIRED)
Только в colmap-9999: CMakeLists.txt.orig
diff -ru colmap-9999.old/src/util/bitmap.cc colmap-9999/src/util/bitmap.cc
--- colmap-9999.old/src/util/bitmap.cc	2017-08-29 17:25:07.495049055 +0300
+++ colmap-9999/src/util/bitmap.cc	2017-08-29 17:52:06.774996550 +0300
@@ -16,10 +16,10 @@
 
 #include "util/bitmap.h"
 
+#include <regex>
 #include <unordered_map>
 
 #include <boost/filesystem/operations.hpp>
-#include <boost/regex.hpp>
 
 #include "base/camera_database.h"
 #include "ext/VLFeat/imopv.h"
@@ -269,9 +269,9 @@
   std::string focal_length_35mm_str;
   if (ReadExifTag(FIMD_EXIF_EXIF, "FocalLengthIn35mmFilm",
                   &focal_length_35mm_str)) {
-    const boost::regex regex(".*?([0-9.]+).*?mm.*?");
-    boost::cmatch result;
-    if (boost::regex_search(focal_length_35mm_str.c_str(), result, regex)) {
+    const std::regex regex(".*?([0-9.]+).*?mm.*?");
+    std::cmatch result;
+    if (std::regex_search(focal_length_35mm_str.c_str(), result, regex)) {
       const double focal_length_35 = boost::lexical_cast<double>(result[1]);
       if (focal_length_35 > 0) {
         *focal_length = focal_length_35 / 35.0 * max_size;
@@ -286,9 +286,9 @@
 
   std::string focal_length_str;
   if (ReadExifTag(FIMD_EXIF_EXIF, "FocalLength", &focal_length_str)) {
-    boost::regex regex(".*?([0-9.]+).*?mm");
-    boost::cmatch result;
-    if (boost::regex_search(focal_length_str.c_str(), result, regex)) {
+    std::regex regex(".*?([0-9.]+).*?mm");
+    std::cmatch result;
+    if (std::regex_search(focal_length_str.c_str(), result, regex)) {
       const double focal_length_mm = boost::lexical_cast<double>(result[1]);
 
       // Lookup sensor width in database.
@@ -312,11 +312,11 @@
           ReadExifTag(FIMD_EXIF_EXIF, "FocalPlaneXResolution", &x_res_str) &&
           ReadExifTag(FIMD_EXIF_EXIF, "FocalPlaneResolutionUnit",
                       &res_unit_str)) {
-        regex = boost::regex(".*?([0-9.]+).*?");
-        if (boost::regex_search(pixel_x_dim_str.c_str(), result, regex)) {
+        regex = std::regex(".*?([0-9.]+).*?");
+        if (std::regex_search(pixel_x_dim_str.c_str(), result, regex)) {
           const double pixel_x_dim = boost::lexical_cast<double>(result[1]);
-          regex = boost::regex(".*?([0-9.]+).*?/.*?([0-9.]+).*?");
-          if (boost::regex_search(x_res_str.c_str(), result, regex)) {
+          regex = std::regex(".*?([0-9.]+).*?/.*?([0-9.]+).*?");
+          if (std::regex_search(x_res_str.c_str(), result, regex)) {
             const double x_res = boost::lexical_cast<double>(result[2]) /
                                  boost::lexical_cast<double>(result[1]);
             // Use PixelXDimension instead of actual width of image, since
@@ -343,9 +343,9 @@
 bool Bitmap::ExifLatitude(double* latitude) {
   std::string str;
   if (ReadExifTag(FIMD_EXIF_GPS, "GPSLatitude", &str)) {
-    const boost::regex regex(".*?([0-9.]+):([0-9.]+):([0-9.]+).*?");
-    boost::cmatch result;
-    if (boost::regex_search(str.c_str(), result, regex)) {
+    const std::regex regex(".*?([0-9.]+):([0-9.]+):([0-9.]+).*?");
+    std::cmatch result;
+    if (std::regex_search(str.c_str(), result, regex)) {
       const double hours = boost::lexical_cast<double>(result[1]);
       const double minutes = boost::lexical_cast<double>(result[2]);
       const double seconds = boost::lexical_cast<double>(result[3]);
@@ -359,9 +359,9 @@
 bool Bitmap::ExifLongitude(double* longitude) {
   std::string str;
   if (ReadExifTag(FIMD_EXIF_GPS, "GPSLongitude", &str)) {
-    const boost::regex regex(".*?([0-9.]+):([0-9.]+):([0-9.]+).*?");
-    boost::cmatch result;
-    if (boost::regex_search(str.c_str(), result, regex)) {
+    const std::regex regex(".*?([0-9.]+):([0-9.]+):([0-9.]+).*?");
+    std::cmatch result;
+    if (std::regex_search(str.c_str(), result, regex)) {
       const double hours = boost::lexical_cast<double>(result[1]);
       const double minutes = boost::lexical_cast<double>(result[2]);
       const double seconds = boost::lexical_cast<double>(result[3]);
@@ -375,9 +375,9 @@
 bool Bitmap::ExifAltitude(double* altitude) {
   std::string str;
   if (ReadExifTag(FIMD_EXIF_GPS, "GPSAltitude", &str)) {
-    const boost::regex regex(".*?([0-9.]+).*?/.*?([0-9.]+).*?");
-    boost::cmatch result;
-    if (boost::regex_search(str.c_str(), result, regex)) {
+    const std::regex regex(".*?([0-9.]+).*?/.*?([0-9.]+).*?");
+    std::cmatch result;
+    if (std::regex_search(str.c_str(), result, regex)) {
       *altitude = boost::lexical_cast<double>(result[1]) /
                   boost::lexical_cast<double>(result[2]);
       return true;
