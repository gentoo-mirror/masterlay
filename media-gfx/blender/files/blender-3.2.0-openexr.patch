diff -ru blender-3.2.9999.old/build_files/cmake/Modules/FindOpenEXR.cmake blender-3.2.9999/build_files/cmake/Modules/FindOpenEXR.cmake
--- blender-3.2.9999.old/build_files/cmake/Modules/FindOpenEXR.cmake	2022-02-16 02:21:03.293386295 +0300
+++ blender-3.2.9999/build_files/cmake/Modules/FindOpenEXR.cmake	2022-02-16 02:40:25.394042868 +0300
@@ -29,6 +29,17 @@
 # Old versions (before 2.0?) do not have any version string, just assuming this should be fine though.
 SET(_openexr_libs_ver_init "2.0")
 
+find_package(Imath CONFIG QUIET)
+if(TARGET Imath::Imath)
+SET(_openexr_FIND_COMPONENTS
+  Imath
+  Iex
+  OpenEXR
+  IlmThread
+)
+
+else()
+
 SET(_openexr_FIND_COMPONENTS
   Half
   Iex
@@ -36,6 +47,7 @@
   IlmThread
   Imath
 )
+endif()
 
 SET(_openexr_SEARCH_DIRS
   ${OPENEXR_ROOT_DIR}
@@ -117,6 +129,9 @@
   SET(OPENEXR_LIBRARIES ${_openexr_LIBRARIES})
   # Both include paths are needed because of dummy OSL headers mixing #include <OpenEXR/foo.h> and #include <foo.h> :(
   SET(OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR} ${OPENEXR_INCLUDE_DIR}/OpenEXR)
+  if(TARGET Imath::Imath)
+    list(APPEND OPENEXR_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIR}/Imath)
+  endif()
 ENDIF()
 
 MARK_AS_ADVANCED(
diff -ru blender-3.2.9999.old/source/blender/imbuf/intern/openexr/openexr_api.cpp blender-3.2.9999/source/blender/imbuf/intern/openexr/openexr_api.cpp
--- blender-3.2.9999.old/source/blender/imbuf/intern/openexr/openexr_api.cpp	2022-02-16 02:21:03.942417425 +0300
+++ blender-3.2.9999/source/blender/imbuf/intern/openexr/openexr_api.cpp	2022-02-16 02:38:10.098081843 +0300
@@ -16,30 +16,31 @@
 #include <stdexcept>
 #include <string>
 
-#include <Iex.h>
+#include <OpenEXR/Iex.h>
 #include <ImathBox.h>
-#include <ImfArray.h>
-#include <ImfChannelList.h>
-#include <ImfCompression.h>
-#include <ImfCompressionAttribute.h>
-#include <ImfIO.h>
-#include <ImfInputFile.h>
-#include <ImfOutputFile.h>
-#include <ImfPixelType.h>
-#include <ImfStandardAttributes.h>
-#include <ImfStringAttribute.h>
-#include <ImfVersion.h>
-#include <half.h>
+#include <OpenEXR/ImfArray.h>
+#include <OpenEXR/ImfFrameBuffer.h>
+#include <OpenEXR/ImfChannelList.h>
+#include <OpenEXR/ImfCompression.h>
+#include <OpenEXR/ImfCompressionAttribute.h>
+#include <OpenEXR/ImfIO.h>
+#include <OpenEXR/ImfInputFile.h>
+#include <OpenEXR/ImfOutputFile.h>
+#include <OpenEXR/ImfPixelType.h>
+#include <OpenEXR/ImfStandardAttributes.h>
+#include <OpenEXR/ImfStringAttribute.h>
+#include <OpenEXR/ImfVersion.h>
+#include <Imath/half.h>
 
 /* multiview/multipart */
-#include <ImfInputPart.h>
-#include <ImfMultiPartInputFile.h>
-#include <ImfMultiPartOutputFile.h>
-#include <ImfMultiView.h>
-#include <ImfOutputPart.h>
-#include <ImfPartHelper.h>
-#include <ImfPartType.h>
-#include <ImfTiledOutputPart.h>
+#include <OpenEXR/ImfInputPart.h>
+#include <OpenEXR/ImfMultiPartInputFile.h>
+#include <OpenEXR/ImfMultiPartOutputFile.h>
+#include <OpenEXR/ImfMultiView.h>
+#include <OpenEXR/ImfOutputPart.h>
+#include <OpenEXR/ImfPartHelper.h>
+#include <OpenEXR/ImfPartType.h>
+#include <OpenEXR/ImfTiledOutputPart.h>
 
 #include "DNA_scene_types.h" /* For OpenEXR compression constants */
 
@@ -115,12 +116,12 @@
     return false;
   }
 
-  Int64 tellg() override
+  uint64_t tellg() override
   {
     return _exrpos;
   }
 
-  void seekg(Int64 pos) override
+  void seekg(uint64_t pos) override
   {
     _exrpos = pos;
   }
@@ -130,8 +131,8 @@
   }
 
  private:
-  Int64 _exrpos;
-  Int64 _exrsize;
+  uint64_t _exrpos;
+  uint64_t _exrsize;
   unsigned char *_exrbuf;
 };
 
@@ -166,12 +167,12 @@
     return check_error();
   }
 
-  Int64 tellg() override
+  uint64_t tellg() override
   {
     return std::streamoff(ifs.tellg());
   }
 
-  void seekg(Int64 pos) override
+  void seekg(uint64_t pos) override
   {
     ifs.seekg(pos);
     check_error();
@@ -215,19 +216,19 @@
     ibuf->encodedsize += n;
   }
 
-  Int64 tellp() override
+  uint64_t tellp() override
   {
     return offset;
   }
 
-  void seekp(Int64 pos) override
+  void seekp(uint64_t pos) override
   {
     offset = pos;
     ensure_size(offset);
   }
 
  private:
-  void ensure_size(Int64 size)
+  void ensure_size(uint64_t size)
   {
     /* if buffer is too small increase it. */
     while (size > ibuf->encodedbuffersize) {
@@ -238,7 +239,7 @@
   }
 
   ImBuf *ibuf;
-  Int64 offset;
+  uint64_t offset;
 };
 
 /* File Output Stream */
@@ -268,12 +269,12 @@
     check_error();
   }
 
-  Int64 tellp() override
+  uint64_t tellp() override
   {
     return std::streamoff(ofs.tellp());
   }
 
-  void seekp(Int64 pos) override
+  void seekp(uint64_t pos) override
   {
     ofs.seekp(pos);
     check_error();
