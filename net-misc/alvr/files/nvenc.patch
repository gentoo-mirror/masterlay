From c1518ed72517e8c82249119442691b8a1e99846c Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Tue, 7 Dec 2021 13:28:26 +0000
Subject: [PATCH 01/18] add 'cmake' dep to prep_fedora_server in
 alvr_build_linux.sh

---
 packaging/alvr_build_linux.sh | 1 +
 1 file changed, 1 insertion(+)

diff --git a/packaging/alvr_build_linux.sh b/packaging/alvr_build_linux.sh
index 7f833332..0d398b6a 100755
--- a/packaging/alvr_build_linux.sh
+++ b/packaging/alvr_build_linux.sh
@@ -181,6 +181,7 @@ prep_fedora_server() {
     basePackages=(
         'dnf-utils'
         'git'
+        'cmake'
         "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-${VERSION_ID}.noarch.rpm"
         "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${VERSION_ID}.noarch.rpm"
     )

From fe529ae15b79b4cd9224148e75be539b353ae43c Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Mon, 3 Jan 2022 21:44:19 +0000
Subject: [PATCH 02/18] feat. Added nvenc encoder. Added deps to dependencies.
 Change while loop for wait to push frame to if stat with continue stat.

---
 alvr/server/cpp/platform/linux/CEncoder.cpp   |   5 +-
 .../cpp/platform/linux/EncodePipeline.cpp     |   7 ++
 .../platform/linux/EncodePipelineNvEnc.cpp    | 108 ++++++++++++++++++
 .../cpp/platform/linux/EncodePipelineNvEnc.h  |  25 ++++
 alvr/xtask/src/dependencies.rs                |   5 +-
 5 files changed, 147 insertions(+), 3 deletions(-)
 create mode 100644 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
 create mode 100644 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h

diff --git a/alvr/server/cpp/platform/linux/CEncoder.cpp b/alvr/server/cpp/platform/linux/CEncoder.cpp
index b373c34c..af30c470 100644
--- a/alvr/server/cpp/platform/linux/CEncoder.cpp
+++ b/alvr/server/cpp/platform/linux/CEncoder.cpp
@@ -249,7 +249,10 @@ void CEncoder::Run() {
         }
 
         encoded_data.clear();
-        while (encode_pipeline->GetEncoded(encoded_data)) {}
+        // Encoders can req more then once frame, need to accumulate more data before sending it to the client
+        if (!encode_pipeline->GetEncoded(encoded_data)) {
+          continue;
+        }
 
         m_listener->SendVideo(encoded_data.data(), encoded_data.size(), m_poseSubmitIndex + Settings::Instance().m_trackingFrameOffset);
 
diff --git a/alvr/server/cpp/platform/linux/EncodePipeline.cpp b/alvr/server/cpp/platform/linux/EncodePipeline.cpp
index e10ef557..8b9f81ff 100644
--- a/alvr/server/cpp/platform/linux/EncodePipeline.cpp
+++ b/alvr/server/cpp/platform/linux/EncodePipeline.cpp
@@ -4,6 +4,7 @@
 #include "alvr_server/Settings.h"
 #include "EncodePipelineSW.h"
 #include "EncodePipelineVAAPI.h"
+#include "EncodePipelineNvEnc.h"
 #include "ffmpeg_helper.h"
 
 extern "C" {
@@ -75,6 +76,12 @@ std::unique_ptr<alvr::EncodePipeline> alvr::EncodePipeline::Create(std::vector<V
   {
     Info("failed to create VAAPI encoder");
   }
+  try {
+    return std::make_unique<alvr::EncodePipelineNvEnc>(input_frames, vk_frame_ctx);
+  } catch (...)
+  {
+    Info("failed to create NvEnc encoder");
+  }
   return std::make_unique<alvr::EncodePipelineSW>(input_frames, vk_frame_ctx);
 }
 
diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
new file mode 100644
index 00000000..1e989a55
--- /dev/null
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
@@ -0,0 +1,108 @@
+#include "EncodePipelineNvEnc.h"
+#include "ALVR-common/packet_types.h"
+#include "alvr_server/Settings.h"
+#include "ffmpeg_helper.h"
+#include <chrono>
+
+extern "C" {
+#include <libavcodec/avcodec.h>
+#include <libavutil/opt.h>
+#include <libswscale/swscale.h>
+}
+
+namespace {
+
+const char *encoder(ALVR_CODEC codec) {
+    switch (codec) {
+    case ALVR_CODEC_H264:
+        return "h264_nvenc";
+    case ALVR_CODEC_H265:
+        return "hevc_nvenc";
+    }
+    throw std::runtime_error("invalid codec " + std::to_string(codec));
+}
+
+} // namespace
+alvr::EncodePipelineNvEnc::EncodePipelineNvEnc(std::vector<VkFrame> &input_frames,
+                                               VkFrameCtx &vk_frame_ctx) {
+    int err;
+    for (auto &input_frame : input_frames) {
+        vk_frames.push_back(input_frame.make_av_frame(vk_frame_ctx).release());
+    }
+
+    const auto &settings = Settings::Instance();
+
+    auto codec_id = ALVR_CODEC(settings.m_codec);
+    const char *encoder_name = encoder(codec_id);
+    AVCodec *codec = AVCODEC.avcodec_find_encoder_by_name(encoder_name);
+    if (codec == nullptr) {
+        throw std::runtime_error(std::string("Failed to find encoder ") + encoder_name);
+    }
+
+    encoder_ctx = AVCODEC.avcodec_alloc_context3(codec);
+    if (not encoder_ctx) {
+        throw std::runtime_error("failed to allocate NVEnc encoder");
+    }
+
+    switch (codec_id) {
+    case ALVR_CODEC_H264:
+        AVUTIL.av_opt_set(encoder_ctx, "preset", "llhq", 0);
+        AVUTIL.av_opt_set(encoder_ctx, "zerolatency", "1", 0);
+        break;
+    case ALVR_CODEC_H265:
+        AVUTIL.av_opt_set(encoder_ctx, "preset", "llhq", 0);
+        AVUTIL.av_opt_set(encoder_ctx, "zerolatency", "1", 0);
+        break;
+    }
+
+    /**
+     * We will recieve a frame from HW as AV_PIX_FMT_VULKAN which will converted to AV_PIX_FMT_BGRA
+     * as SW format when we get it from HW.
+     * But NVEnc support only BGR0 format and we easy can just to force it
+     * Because:
+     * AV_PIX_FMT_BGRA - 28  ///< packed BGRA 8:8:8:8, 32bpp, BGRABGRA...
+     * AV_PIX_FMT_BGR0 - 123 ///< packed BGR 8:8:8,    32bpp, BGRXBGRX...   X=unused/undefined
+     *
+     * We just to ignore the alpha channel and it's done
+     */
+    encoder_ctx->pix_fmt = AV_PIX_FMT_BGR0;
+    encoder_ctx->width = settings.m_renderWidth;
+    encoder_ctx->height = settings.m_renderHeight;
+    encoder_ctx->time_base = {std::chrono::steady_clock::period::num,
+                              std::chrono::steady_clock::period::den};
+    encoder_ctx->framerate = AVRational{settings.m_refreshRate, 1};
+    encoder_ctx->sample_aspect_ratio = AVRational{1, 1};
+    encoder_ctx->max_b_frames = 0;
+    encoder_ctx->gop_size = 30;
+    encoder_ctx->bit_rate = settings.mEncodeBitrateMBs * 1000 * 1000;
+
+    err = AVCODEC.avcodec_open2(encoder_ctx, codec, NULL);
+    if (err < 0) {
+        throw alvr::AvException("Cannot open video encoder codec:", err);
+    }
+
+    hw_frame = AVUTIL.av_frame_alloc();
+}
+
+alvr::EncodePipelineNvEnc::~EncodePipelineNvEnc() {
+    for (auto &vk_frame : vk_frames)
+        AVUTIL.av_frame_free(&vk_frame);
+    AVUTIL.av_buffer_unref(&hw_ctx);
+    AVUTIL.av_frame_free(&hw_frame);
+}
+
+void alvr::EncodePipelineNvEnc::PushFrame(uint32_t frame_index, bool idr) {
+    assert(frame_index < vk_frames.size());
+
+    int err = AVUTIL.av_hwframe_transfer_data(hw_frame, vk_frames[frame_index], 0);
+    if (err) {
+        throw alvr::AvException("av_hwframe_transfer_data", err);
+    }
+
+    hw_frame->pict_type = idr ? AV_PICTURE_TYPE_I : AV_PICTURE_TYPE_NONE;
+    hw_frame->pts = std::chrono::steady_clock::now().time_since_epoch().count();
+
+    if ((err = AVCODEC.avcodec_send_frame(encoder_ctx, hw_frame)) < 0) {
+        throw alvr::AvException("avcodec_send_frame failed:", err);
+    }
+}
\ No newline at end of file
diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h
new file mode 100644
index 00000000..0b52b6ef
--- /dev/null
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h
@@ -0,0 +1,25 @@
+#pragma once
+
+#include "EncodePipeline.h"
+
+extern "C" struct AVBufferRef;
+extern "C" struct AVCodecContext;
+extern "C" struct AVFrame;
+
+namespace alvr
+{
+
+class EncodePipelineNvEnc: public EncodePipeline
+{
+public:
+  ~EncodePipelineNvEnc();
+  EncodePipelineNvEnc(std::vector<VkFrame> &input_frames, VkFrameCtx& vk_frame_ctx);
+
+  void PushFrame(uint32_t frame_index, bool idr) override;
+
+private:
+  AVBufferRef *hw_ctx = nullptr;
+  std::vector<AVFrame *> vk_frames;
+  AVFrame * hw_frame = nullptr;
+};
+}
diff --git a/alvr/xtask/src/dependencies.rs b/alvr/xtask/src/dependencies.rs
index a7df6218..f32d7111 100644
--- a/alvr/xtask/src/dependencies.rs
+++ b/alvr/xtask/src/dependencies.rs
@@ -94,10 +94,11 @@ pub fn build_ffmpeg_linux() -> std::path::PathBuf {
             "--disable-network",
             "--enable-lto",
             format!(
-                "--disable-everything {} {} {} {}",
+                "--disable-everything {} {} {} {} {}",
+                "--enable-encoder=h264_nvenc --enable-encoder=hevc_nvenc --enable-nonfree --enable-nvenc --enable-cuda --enable-cuda-nvcc --enable-libnpp --nvccflags=\"-gencode arch=compute_52,code=sm_52 -O2\" --extra-cflags=-I/usr/local/cuda/include/  --extra-ldflags=-L/usr/local/cuda/lib64/",
                 "--enable-encoder=h264_vaapi --enable-encoder=hevc_vaapi",
                 "--enable-encoder=libx264 --enable-encoder=libx264rgb --enable-encoder=libx265",
-                "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi",
+                "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc",
                 "--enable-filter=scale --enable-filter=scale_vaapi",
             ),
             "--enable-libx264 --enable-libx265 --enable-vulkan",

From 730dee7340bb7af2ef7ae1baaad209b79a3649ec Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 5 Jan 2022 23:23:00 +0000
Subject: [PATCH 03/18] add comment to describe --nvccflags for ffmpeg build.

---
 alvr/xtask/src/dependencies.rs | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/alvr/xtask/src/dependencies.rs b/alvr/xtask/src/dependencies.rs
index f32d7111..bb1effa0 100644
--- a/alvr/xtask/src/dependencies.rs
+++ b/alvr/xtask/src/dependencies.rs
@@ -70,8 +70,10 @@ fn build_rust_android_gradle() {
     fs::remove_dir_all(temp_build_dir).ok();
 }
 
-pub fn build_ffmpeg_linux() -> std::path::PathBuf {
-    // dependencies: build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev
+pub fn build_ffmpeg_linux(nvenc_flag: bool) -> std::path::PathBuf {
+    /* dependencies: build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev
+                     libx264-dev libx265-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
+    */
 
     let download_path = afs::deps_dir().join("linux");
     let ffmpeg_path = download_path.join("FFmpeg-n4.4");
@@ -94,8 +96,16 @@ pub fn build_ffmpeg_linux() -> std::path::PathBuf {
             "--disable-network",
             "--enable-lto",
             format!(
-                "--disable-everything {} {} {} {} {}",
-                "--enable-encoder=h264_nvenc --enable-encoder=hevc_nvenc --enable-nonfree --enable-nvenc --enable-cuda --enable-cuda-nvcc --enable-libnpp --nvccflags=\"-gencode arch=compute_52,code=sm_52 -O2\" --extra-cflags=-I/usr/local/cuda/include/  --extra-ldflags=-L/usr/local/cuda/lib64/",
+                "--disable-everything {} {} {} {} {} {}",
+                /*
+                   Describing Nvidia specific options --nvccflags: 
+                   nvcc from CUDA toolkit version 11.0 or higher does not support compiling for 'compute_30' (default in ffmpeg)
+                   52 is the minimum required for the current CUDA 11 version (Quadro M6000 , GeForce 900, GTX-970, GTX-980, GTX Titan X)
+                   https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
+                   Anyway below 50 arch card don't support nvenc encoding hevc https://developer.nvidia.com/nvidia-video-codec-sdk (Supported devices)
+                   Nvidia docs:
+                   https://docs.nvidia.com/video-technologies/video-codec-sdk/ffmpeg-with-nvidia-gpu/#commonly-faced-issues-and-tips-to-resolve-them
+                */
                 "--enable-encoder=h264_vaapi --enable-encoder=hevc_vaapi",
                 "--enable-encoder=libx264 --enable-encoder=libx264rgb --enable-encoder=libx265",
                 "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc",

From 0257eb76cff21142fae1f1a855b67b38a53dc413 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 5 Jan 2022 23:23:51 +0000
Subject: [PATCH 04/18] CI build add libffmpeg-nvenc-dev nvidia-cuda-toolkit
 libs to build_linux

---
 .github/workflows/rust.yml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/.github/workflows/rust.yml b/.github/workflows/rust.yml
index c22796f4..a0ec0961 100644
--- a/.github/workflows/rust.yml
+++ b/.github/workflows/rust.yml
@@ -43,10 +43,9 @@ jobs:
           RUST_BACKTRACE: 1
         run: |
           sudo apt update
-          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev
+          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
           cargo xtask build-ffmpeg-linux
           cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..
-          sudo apt install build-essential pkg-config cmake libasound2-dev libgtk-3-dev libvulkan-dev libunwind-dev
 
       - name: Build crates
         uses: actions-rs/cargo@v1

From ef920dead91833aac0b480d92868678206e4785d Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 5 Jan 2022 23:24:25 +0000
Subject: [PATCH 05/18] Update cargo xtask descriptions

---
 alvr/xtask/src/main.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/alvr/xtask/src/main.rs b/alvr/xtask/src/main.rs
index 138ca168..92b4fdb4 100644
--- a/alvr/xtask/src/main.rs
+++ b/alvr/xtask/src/main.rs
@@ -20,7 +20,7 @@ SUBCOMMANDS:
     build-android-deps  Download and compile external dependencies for Android
     build-server        Build server driver, then copy binaries to build folder
     build-client        Build client, then copy binaries to build folder
-    build-ffmpeg-linux  Build FFmpeg with VAAPI and Vulkan support. Only for CI
+    build-ffmpeg-linux  Build FFmpeg with VAAPI, NVenc and Vulkan support. Only for CI
     publish-server      Build server in release mode, make portable version and installer
     publish-client      Build client for all headsets
     clean               Removes build folder

From c92808091cc2618443d5a4aefa2ede0821f0163d Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 5 Jan 2022 23:26:13 +0000
Subject: [PATCH 06/18] Added flag `--no-nvidia` to cargo xtask for building
 ffmpeg without nvidia libs requires. Only for developers.

---
 alvr/xtask/src/dependencies.rs |  4 +++-
 alvr/xtask/src/main.rs         | 12 ++++++++++--
 alvr/xtask/src/packaging.rs    |  2 +-
 3 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/alvr/xtask/src/dependencies.rs b/alvr/xtask/src/dependencies.rs
index bb1effa0..1ae46a46 100644
--- a/alvr/xtask/src/dependencies.rs
+++ b/alvr/xtask/src/dependencies.rs
@@ -106,9 +106,11 @@ pub fn build_ffmpeg_linux(nvenc_flag: bool) -> std::path::PathBuf {
                    Nvidia docs:
                    https://docs.nvidia.com/video-technologies/video-codec-sdk/ffmpeg-with-nvidia-gpu/#commonly-faced-issues-and-tips-to-resolve-them
                 */
+                (if nvenc_flag {"--enable-encoder=h264_nvenc --enable-encoder=hevc_nvenc --enable-nonfree --enable-cuda-nvcc --enable-libnpp --nvccflags=\"-gencode arch=compute_52,code=sm_52 -O2\" --extra-cflags=-I/usr/local/cuda/include/ --extra-ldflags=-L/usr/local/cuda/lib64/"} else {""}),
                 "--enable-encoder=h264_vaapi --enable-encoder=hevc_vaapi",
                 "--enable-encoder=libx264 --enable-encoder=libx264rgb --enable-encoder=libx265",
-                "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc",
+                "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi",
+                (if nvenc_flag {"--enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc"} else {""}),
                 "--enable-filter=scale --enable-filter=scale_vaapi",
             ),
             "--enable-libx264 --enable-libx265 --enable-vulkan",
diff --git a/alvr/xtask/src/main.rs b/alvr/xtask/src/main.rs
index 92b4fdb4..e88e059d 100644
--- a/alvr/xtask/src/main.rs
+++ b/alvr/xtask/src/main.rs
@@ -38,6 +38,7 @@ FLAGS:
     --oculus-quest      Oculus Quest build. Used only for build-client subcommand
     --oculus-go         Oculus Go build. Used only for build-client subcommand
     --bundle-ffmpeg     Bundle ffmpeg libraries. Only used for build-server subcommand on Linux
+    --no-nvidia         Additional flag for build-ffmpeg-linux subcommand. Build don't reqired NVidia libs ffmpeg
     --help              Print this text
 
 ARGS:
@@ -56,6 +57,7 @@ pub fn build_server(
     experiments: bool,
     fetch_crates: bool,
     bundle_ffmpeg: bool,
+    no_nvidia: bool,
     root: Option<String>,
     reproducible: bool,
 ) {
@@ -117,7 +119,8 @@ pub fn build_server(
     .unwrap();
 
     if bundle_ffmpeg {
-        let ffmpeg_path = dependencies::build_ffmpeg_linux();
+        let nvenc_flag = !no_nvidia;
+        let ffmpeg_path = dependencies::build_ffmpeg_linux(nvenc_flag);
         let lib_dir = afs::server_build_dir().join("lib64").join("alvr");
         fs::create_dir_all(lib_dir.clone()).unwrap();
         for lib in walkdir::WalkDir::new(ffmpeg_path)
@@ -357,6 +360,7 @@ fn main() {
         let for_oculus_quest = args.contains("--oculus-quest");
         let for_oculus_go = args.contains("--oculus-go");
         let bundle_ffmpeg = args.contains("--bundle-ffmpeg");
+        let no_nvidia = args.contains("--no-nvidia");
         let reproducible = args.contains("--reproducible");
         let root: Option<String> = args.opt_value_from_str("--root").unwrap();
 
@@ -369,6 +373,7 @@ fn main() {
                     experiments,
                     fetch,
                     bundle_ffmpeg,
+                    no_nvidia,
                     root,
                     reproducible,
                 ),
@@ -382,7 +387,10 @@ fn main() {
                     }
                 }
                 "build-ffmpeg-linux" => {
-                    dependencies::build_ffmpeg_linux();
+                    dependencies::build_ffmpeg_linux(true);
+                }
+                "build-ffmpeg-linux-no-nvidia" => {
+                    dependencies::build_ffmpeg_linux(false);
                 }
                 "publish-server" => packaging::publish_server(is_nightly, root, reproducible),
                 "publish-client" => packaging::publish_client(is_nightly),
diff --git a/alvr/xtask/src/packaging.rs b/alvr/xtask/src/packaging.rs
index 1a510d8e..b4761efa 100644
--- a/alvr/xtask/src/packaging.rs
+++ b/alvr/xtask/src/packaging.rs
@@ -103,7 +103,7 @@ fn build_windows_installer(wix_path: &str) {
 }
 
 pub fn publish_server(is_nightly: bool, root: Option<String>, reproducible: bool) {
-    build_server(true, false, false, false, root, reproducible);
+    build_server(true, false, false, true, false, root, reproducible);
 
     // Add licenses
     let licenses_dir = afs::server_build_dir().join("licenses");

From b44590bc8eebfd3303aa3aa0d7d37aef7ca8f956 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 5 Jan 2022 23:35:15 +0000
Subject: [PATCH 07/18] publish_server -> bundle_ffmpeg with pkg on linux

---
 alvr/xtask/src/packaging.rs | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/alvr/xtask/src/packaging.rs b/alvr/xtask/src/packaging.rs
index b4761efa..e853c839 100644
--- a/alvr/xtask/src/packaging.rs
+++ b/alvr/xtask/src/packaging.rs
@@ -103,8 +103,9 @@ fn build_windows_installer(wix_path: &str) {
 }
 
 pub fn publish_server(is_nightly: bool, root: Option<String>, reproducible: bool) {
-    build_server(true, false, false, true, false, root, reproducible);
-
+    let bundle_ffmpeg = cfg!(target_os = "linux");
+    build_server(true, false, false, bundle_ffmpeg, false, root, reproducible);
+    
     // Add licenses
     let licenses_dir = afs::server_build_dir().join("licenses");
     fs::create_dir_all(&licenses_dir).unwrap();

From 1bb363ed18a6c10849c76c297efb4151948a1181 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 6 Jan 2022 00:49:16 +0000
Subject: [PATCH 08/18] cargo fmt

---
 alvr/xtask/src/packaging.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/alvr/xtask/src/packaging.rs b/alvr/xtask/src/packaging.rs
index e853c839..e85d770d 100644
--- a/alvr/xtask/src/packaging.rs
+++ b/alvr/xtask/src/packaging.rs
@@ -105,7 +105,7 @@ fn build_windows_installer(wix_path: &str) {
 pub fn publish_server(is_nightly: bool, root: Option<String>, reproducible: bool) {
     let bundle_ffmpeg = cfg!(target_os = "linux");
     build_server(true, false, false, bundle_ffmpeg, false, root, reproducible);
-    
+
     // Add licenses
     let licenses_dir = afs::server_build_dir().join("licenses");
     fs::create_dir_all(&licenses_dir).unwrap();

From 2f5b87c57de5c2f878f79ac691e1ccaf1f4885a6 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 6 Jan 2022 01:10:04 +0000
Subject: [PATCH 09/18] nvenc: check input frame on correct format, should be
 AV_PIX_FMT_BGRA

---
 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
index 1e989a55..517d0819 100644
--- a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
@@ -25,6 +25,9 @@ const char *encoder(ALVR_CODEC codec) {
 } // namespace
 alvr::EncodePipelineNvEnc::EncodePipelineNvEnc(std::vector<VkFrame> &input_frames,
                                                VkFrameCtx &vk_frame_ctx) {
+    auto input_frame_ctx = (AVHWFramesContext *)vk_frame_ctx.ctx->data;
+    assert(input_frame_ctx->sw_format == AV_PIX_FMT_BGRA);
+
     int err;
     for (auto &input_frame : input_frames) {
         vk_frames.push_back(input_frame.make_av_frame(vk_frame_ctx).release());

From 53c38be91c76f467d79c11c4532386cc0292e25d Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 6 Jan 2022 09:42:30 +0000
Subject: [PATCH 10/18] update --no-nvidia description

---
 alvr/xtask/src/main.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/alvr/xtask/src/main.rs b/alvr/xtask/src/main.rs
index e88e059d..55047e47 100644
--- a/alvr/xtask/src/main.rs
+++ b/alvr/xtask/src/main.rs
@@ -38,7 +38,7 @@ FLAGS:
     --oculus-quest      Oculus Quest build. Used only for build-client subcommand
     --oculus-go         Oculus Go build. Used only for build-client subcommand
     --bundle-ffmpeg     Bundle ffmpeg libraries. Only used for build-server subcommand on Linux
-    --no-nvidia         Additional flag for build-ffmpeg-linux subcommand. Build don't reqired NVidia libs ffmpeg
+    --no-nvidia         Additional flag for `--bundle-ffmpeg` subcommand. Build don't require NVidia libs FFmpeg related
     --help              Print this text
 
 ARGS:

From f16f48688cf136b100b56233dbc0a47f5c3d40fe Mon Sep 17 00:00:00 2001
From: ckie <git-525ff67@ckie.dev>
Date: Tue, 11 Jan 2022 22:55:50 +0200
Subject: [PATCH 11/18] minor review changes

---
 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp | 4 ++--
 alvr/xtask/src/main.rs                                 | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
index 517d0819..5b15ea38 100644
--- a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
@@ -44,7 +44,7 @@ alvr::EncodePipelineNvEnc::EncodePipelineNvEnc(std::vector<VkFrame> &input_frame
 
     encoder_ctx = AVCODEC.avcodec_alloc_context3(codec);
     if (not encoder_ctx) {
-        throw std::runtime_error("failed to allocate NVEnc encoder");
+        throw std::runtime_error("failed to allocate NvEnc encoder");
     }
 
     switch (codec_id) {
@@ -108,4 +108,4 @@ void alvr::EncodePipelineNvEnc::PushFrame(uint32_t frame_index, bool idr) {
     if ((err = AVCODEC.avcodec_send_frame(encoder_ctx, hw_frame)) < 0) {
         throw alvr::AvException("avcodec_send_frame failed:", err);
     }
-}
\ No newline at end of file
+}
diff --git a/alvr/xtask/src/main.rs b/alvr/xtask/src/main.rs
index 55047e47..ccec0630 100644
--- a/alvr/xtask/src/main.rs
+++ b/alvr/xtask/src/main.rs
@@ -20,7 +20,7 @@ SUBCOMMANDS:
     build-android-deps  Download and compile external dependencies for Android
     build-server        Build server driver, then copy binaries to build folder
     build-client        Build client, then copy binaries to build folder
-    build-ffmpeg-linux  Build FFmpeg with VAAPI, NVenc and Vulkan support. Only for CI
+    build-ffmpeg-linux  Build FFmpeg with VAAPI, NvEnc and Vulkan support. Only for CI
     publish-server      Build server in release mode, make portable version and installer
     publish-client      Build client for all headsets
     clean               Removes build folder
@@ -38,7 +38,7 @@ FLAGS:
     --oculus-quest      Oculus Quest build. Used only for build-client subcommand
     --oculus-go         Oculus Go build. Used only for build-client subcommand
     --bundle-ffmpeg     Bundle ffmpeg libraries. Only used for build-server subcommand on Linux
-    --no-nvidia         Additional flag for `--bundle-ffmpeg` subcommand. Build don't require NVidia libs FFmpeg related
+    --no-nvidia         Additional flag to use with `build-server`. Disables nVidia support.
     --help              Print this text
 
 ARGS:

From 5a33290f35579c838ca52e6ffa3241908bfe66c1 Mon Sep 17 00:00:00 2001
From: ckie <git-525ff67@ckie.dev>
Date: Tue, 11 Jan 2022 23:24:56 +0200
Subject: [PATCH 12/18] cargo update

---
 Cargo.lock | 21 +++++++++++----------
 1 file changed, 11 insertions(+), 10 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 82bcdf61..3ba9d304 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -4198,15 +4198,16 @@ dependencies = [
 
 [[package]]
 name = "reqwest"
-version = "0.11.8"
+version = "0.11.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7c4e0a76dc12a116108933f6301b95e83634e0c47b0afbed6abbaa0601e99258"
+checksum = "87f242f1488a539a79bac6dbe7c8609ae43b7914b7736210f239a37cccb32525"
 dependencies = [
  "base64",
  "bytes",
  "encoding_rs",
  "futures-core",
  "futures-util",
+ "h2",
  "http",
  "http-body",
  "hyper",
@@ -4233,9 +4234,9 @@ dependencies = [
 
 [[package]]
 name = "rhai"
-version = "1.3.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c00a731f4b606602a1683ae0a1289a59497c39075fb6dc56ce9ec9251ef48b89"
+checksum = "2c7433068977c56619bf2b7831da26eb986d0645fe56f2ad9357eda7ae4c435e"
 dependencies = [
  "ahash 0.7.6",
  "instant",
@@ -4248,9 +4249,9 @@ dependencies = [
 
 [[package]]
 name = "rhai_codegen"
-version = "1.2.0"
+version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b14fd9df9de7895cb7e79ba593a9d8eb00a769178476480c26703b97b500a726"
+checksum = "e02d33d76a7aa8ec72ac8298d5b52134fd2dff77445ada0c65f6f8c40d8f2931"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -5629,9 +5630,9 @@ dependencies = [
 
 [[package]]
 name = "wgpu-core"
-version = "0.12.1"
+version = "0.12.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cfe9cb9c9d728c0f7ea0c309f1b3d5e9d5c7d379890d0a4e3df3103323ff7a84"
+checksum = "c4688c000eb841ca55f7b35db659b78d6e1cd77d7caf8fb929f4e181f754047d"
 dependencies = [
  "arrayvec 0.7.2",
  "bitflags",
@@ -5652,9 +5653,9 @@ dependencies = [
 
 [[package]]
 name = "wgpu-hal"
-version = "0.12.1"
+version = "0.12.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "742ec904d0577e1a88b82dba6cf0347c12197cd664b859b05f868bceb8cfff4d"
+checksum = "92e33cb9c380dd1166f316dfc511ad9646f72cf2deb47e90bd714db3617a6998"
 dependencies = [
  "arrayvec 0.7.2",
  "ash",

From 523eebfb8a635b0e29799884f33820e767ab3bc1 Mon Sep 17 00:00:00 2001
From: ckie <git-525ff67@ckie.dev>
Date: Tue, 11 Jan 2022 23:25:22 +0200
Subject: [PATCH 13/18] xtask: add pkg-config support to nvidia
 build-ffmpeg-linux subcommand

---
 Cargo.lock                     |  1 +
 alvr/xtask/Cargo.toml          |  1 +
 alvr/xtask/src/dependencies.rs | 20 +++++++++++++++++---
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 3ba9d304..fe965ee4 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -353,6 +353,7 @@ dependencies = [
  "alvr_filesystem",
  "fs_extra",
  "pico-args",
+ "pkg-config",
  "walkdir",
 ]
 
diff --git a/alvr/xtask/Cargo.toml b/alvr/xtask/Cargo.toml
index aa7be5f4..86a16e2e 100644
--- a/alvr/xtask/Cargo.toml
+++ b/alvr/xtask/Cargo.toml
@@ -12,3 +12,4 @@ alvr_filesystem = { path = "../filesystem" }
 fs_extra = "1"
 pico-args = "0.4"
 walkdir = "2"
+pkg-config = "0.3.9"
diff --git a/alvr/xtask/src/dependencies.rs b/alvr/xtask/src/dependencies.rs
index 1ae46a46..28b2e49a 100644
--- a/alvr/xtask/src/dependencies.rs
+++ b/alvr/xtask/src/dependencies.rs
@@ -96,7 +96,7 @@ pub fn build_ffmpeg_linux(nvenc_flag: bool) -> std::path::PathBuf {
             "--disable-network",
             "--enable-lto",
             format!(
-                "--disable-everything {} {} {} {} {} {}",
+                "--disable-everything {} {} {} {} {}",
                 /*
                    Describing Nvidia specific options --nvccflags: 
                    nvcc from CUDA toolkit version 11.0 or higher does not support compiling for 'compute_30' (default in ffmpeg)
@@ -106,11 +106,25 @@ pub fn build_ffmpeg_linux(nvenc_flag: bool) -> std::path::PathBuf {
                    Nvidia docs:
                    https://docs.nvidia.com/video-technologies/video-codec-sdk/ffmpeg-with-nvidia-gpu/#commonly-faced-issues-and-tips-to-resolve-them
                 */
-                (if nvenc_flag {"--enable-encoder=h264_nvenc --enable-encoder=hevc_nvenc --enable-nonfree --enable-cuda-nvcc --enable-libnpp --nvccflags=\"-gencode arch=compute_52,code=sm_52 -O2\" --extra-cflags=-I/usr/local/cuda/include/ --extra-ldflags=-L/usr/local/cuda/lib64/"} else {""}),
+                (if nvenc_flag {
+                    let cuda = pkg_config::Config::new().probe("cuda").unwrap();
+                    let include_flags = cuda.include_paths
+                        .iter()
+                        .map(|path| format!("-I{:?}", path))
+                        .reduce(|a, b| { format!("{}{}", a, b) })
+                        .expect("pkg-config cuda entry to have include-paths");
+                    let link_flags = cuda.link_paths
+                        .iter()
+                        .map(|path| format!("-L{:?}", path))
+                        .reduce(|a, b| { format!("{}{}", a, b) })
+                        .expect("pkg-config cuda entry to have link-paths");
+
+                    format!("--enable-encoder=h264_nvenc --enable-encoder=hevc_nvenc --enable-nonfree --enable-cuda-nvcc --enable-libnpp --nvccflags=\"-gencode arch=compute_52,code=sm_52 -O2\" --extra-cflags=\"{}\" --extra-ldflags=\"{}\" --enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc",
+                            include_flags, link_flags)
+                } else {"".to_string()}),
                 "--enable-encoder=h264_vaapi --enable-encoder=hevc_vaapi",
                 "--enable-encoder=libx264 --enable-encoder=libx264rgb --enable-encoder=libx265",
                 "--enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi",
-                (if nvenc_flag {"--enable-hwaccel=h264_nvenc --enable-hwaccel=hevc_nvenc"} else {""}),
                 "--enable-filter=scale --enable-filter=scale_vaapi",
             ),
             "--enable-libx264 --enable-libx265 --enable-vulkan",

From e405111507c6298f212e66eb2845e6db784f8dfe Mon Sep 17 00:00:00 2001
From: ckie <git-525ff67@ckie.dev>
Date: Wed, 12 Jan 2022 00:14:17 +0200
Subject: [PATCH 14/18] add missing cuda pkgconfig file

This should be in the Ubuntu repos, but alas...
---
 .github/workflows/rust.yml | 1 +
 packaging/deb/cuda.pc      | 9 +++++++++
 2 files changed, 10 insertions(+)
 create mode 100644 packaging/deb/cuda.pc

diff --git a/.github/workflows/rust.yml b/.github/workflows/rust.yml
index a0ec0961..11d60432 100644
--- a/.github/workflows/rust.yml
+++ b/.github/workflows/rust.yml
@@ -44,6 +44,7 @@ jobs:
         run: |
           sudo apt update
           sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
+          cp packaging/deb/cuda.pc /usr/share/pkgconfig
           cargo xtask build-ffmpeg-linux
           cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..
 
diff --git a/packaging/deb/cuda.pc b/packaging/deb/cuda.pc
new file mode 100644
index 00000000..16e6abfc
--- /dev/null
+++ b/packaging/deb/cuda.pc
@@ -0,0 +1,9 @@
+prefix=/usr/lib/cuda
+includedir=${prefix}/include
+libdir=${prefix}/lib64
+
+Name: cuda
+Description: CUDA Driver Library
+Version: 0.0.0
+Libs: -L${libdir}/stubs -lcuda
+Cflags: -I${includedir}

From fc0a399433b8cb0828626a7a31f3cff28417ea69 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Wed, 12 Jan 2022 23:35:12 +0000
Subject: [PATCH 15/18] nvenc linux: use smart-pointers instead of raw for
 vkframes

---
 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp | 6 ++----
 alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h   | 3 ++-
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
index 5b15ea38..08ebebaf 100644
--- a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.cpp
@@ -30,7 +30,7 @@ alvr::EncodePipelineNvEnc::EncodePipelineNvEnc(std::vector<VkFrame> &input_frame
 
     int err;
     for (auto &input_frame : input_frames) {
-        vk_frames.push_back(input_frame.make_av_frame(vk_frame_ctx).release());
+        vk_frames.push_back(std::move(input_frame.make_av_frame(vk_frame_ctx)));
     }
 
     const auto &settings = Settings::Instance();
@@ -88,8 +88,6 @@ alvr::EncodePipelineNvEnc::EncodePipelineNvEnc(std::vector<VkFrame> &input_frame
 }
 
 alvr::EncodePipelineNvEnc::~EncodePipelineNvEnc() {
-    for (auto &vk_frame : vk_frames)
-        AVUTIL.av_frame_free(&vk_frame);
     AVUTIL.av_buffer_unref(&hw_ctx);
     AVUTIL.av_frame_free(&hw_frame);
 }
@@ -97,7 +95,7 @@ alvr::EncodePipelineNvEnc::~EncodePipelineNvEnc() {
 void alvr::EncodePipelineNvEnc::PushFrame(uint32_t frame_index, bool idr) {
     assert(frame_index < vk_frames.size());
 
-    int err = AVUTIL.av_hwframe_transfer_data(hw_frame, vk_frames[frame_index], 0);
+    int err = AVUTIL.av_hwframe_transfer_data(hw_frame, vk_frames[frame_index].get(), 0);
     if (err) {
         throw alvr::AvException("av_hwframe_transfer_data", err);
     }
diff --git a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h
index 0b52b6ef..11d9ef1b 100644
--- a/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h
+++ b/alvr/server/cpp/platform/linux/EncodePipelineNvEnc.h
@@ -1,5 +1,6 @@
 #pragma once
 
+#include <functional>
 #include "EncodePipeline.h"
 
 extern "C" struct AVBufferRef;
@@ -19,7 +20,7 @@ class EncodePipelineNvEnc: public EncodePipeline
 
 private:
   AVBufferRef *hw_ctx = nullptr;
-  std::vector<AVFrame *> vk_frames;
+  std::vector<std::unique_ptr<AVFrame, std::function<void(AVFrame*)>>> vk_frames;
   AVFrame * hw_frame = nullptr;
 };
 }

From 601ad0b03e03ea496f8f381e650fadc50d5115d8 Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 13 Jan 2022 00:39:54 +0000
Subject: [PATCH 16/18] add cuda.pc for fedora (installed from nvidia)

---
 Cargo.lock            | 28 +++++++++++++++++-----------
 packaging/rpm/cuda.pc |  9 +++++++++
 2 files changed, 26 insertions(+), 11 deletions(-)
 create mode 100644 packaging/rpm/cuda.pc

diff --git a/Cargo.lock b/Cargo.lock
index fe965ee4..fc20c23f 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -944,9 +944,9 @@ checksum = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"
 
 [[package]]
 name = "combine"
-version = "4.6.2"
+version = "4.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b2b2f5d0ee456f3928812dfc8c6d9a1d592b98678f6d56db9b0cd2b7bc6c8db5"
+checksum = "50b727aacc797f9fc28e355d21f34709ac4fc9adecfe470ad07b8f4464f53062"
 dependencies = [
  "bytes",
  "memchr",
@@ -1660,9 +1660,9 @@ dependencies = [
 
 [[package]]
 name = "flume"
-version = "0.10.9"
+version = "0.10.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "24c3fd473b3a903a62609e413ed7538f99e10b665ecb502b5e481a95283f8ab4"
+checksum = "5d04dafd11240188e146b6f6476a898004cace3be31d4ec5e08e216bf4947ac0"
 dependencies = [
  "futures-core",
  "futures-sink",
@@ -2295,6 +2295,12 @@ dependencies = [
  "autocfg",
 ]
 
+[[package]]
+name = "hashbrown"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"
+
 [[package]]
 name = "hashbrown"
 version = "0.11.2"
@@ -2609,12 +2615,12 @@ dependencies = [
 
 [[package]]
 name = "indexmap"
-version = "1.8.0"
+version = "1.6.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223"
+checksum = "824845a0bf897a9042383849b02c1bc219c2383772efcd5c6f9766fa4b81aef3"
 dependencies = [
  "autocfg",
- "hashbrown 0.11.2",
+ "hashbrown 0.9.1",
 ]
 
 [[package]]
@@ -3047,9 +3053,9 @@ checksum = "16cf681a23b4d0a43fc35024c176437f9dcd818db34e0f42ab456a0ee5ad497b"
 
 [[package]]
 name = "naga"
-version = "0.8.1"
+version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a4419062f8aa39fb25938169486341945758679e260ddbc1f94bfd1f33924dc2"
+checksum = "1dfa3912b150e6bfb38a7e94d3f53b950a456a905bb8858590af02006e2e78be"
 dependencies = [
  "bit-set",
  "bitflags",
@@ -3524,9 +3530,9 @@ dependencies = [
 
 [[package]]
 name = "openssl-probe"
-version = "0.1.4"
+version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28988d872ab76095a6e6ac88d99b54fd267702734fd7ffe610ca27f533ddb95a"
+checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"
 
 [[package]]
 name = "openssl-sys"
diff --git a/packaging/rpm/cuda.pc b/packaging/rpm/cuda.pc
new file mode 100644
index 00000000..c4dfb073
--- /dev/null
+++ b/packaging/rpm/cuda.pc
@@ -0,0 +1,9 @@
+prefix=/usr/local/cuda
+includedir=${prefix}/include
+libdir=${prefix}/lib64
+
+Name: cuda
+Description: CUDA Driver Library
+Version: 0.0.0
+Libs: -L${libdir}/stubs -lcuda
+Cflags: -I${includedir}
\ No newline at end of file

From 987a917b20b69ac41012a876aaf566d3e745e3ac Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 13 Jan 2022 10:55:12 +0000
Subject: [PATCH 17/18] Revert "add 'cmake' dep to prep_fedora_server in
 alvr_build_linux.sh"

This reverts commit c1518ed72517e8c82249119442691b8a1e99846c.
---
 packaging/alvr_build_linux.sh | 1 -
 1 file changed, 1 deletion(-)

diff --git a/packaging/alvr_build_linux.sh b/packaging/alvr_build_linux.sh
index 0d398b6a..7f833332 100755
--- a/packaging/alvr_build_linux.sh
+++ b/packaging/alvr_build_linux.sh
@@ -181,7 +181,6 @@ prep_fedora_server() {
     basePackages=(
         'dnf-utils'
         'git'
-        'cmake'
         "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-${VERSION_ID}.noarch.rpm"
         "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${VERSION_ID}.noarch.rpm"
     )

From a822a6dec30348f4fa313d1196af1743878b302d Mon Sep 17 00:00:00 2001
From: Anton Palgunov <toxblh@gmail.com>
Date: Thu, 13 Jan 2022 10:55:48 +0000
Subject: [PATCH 18/18] fedora add cmake to BuildRequires

---
 packaging/rpm/alvr.spec | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/packaging/rpm/alvr.spec b/packaging/rpm/alvr.spec
index 5b5d8c6d..71a9065b 100644
--- a/packaging/rpm/alvr.spec
+++ b/packaging/rpm/alvr.spec
@@ -6,7 +6,7 @@ License: MIT
 Source: https://github.com/alvr-org/ALVR/archive/refs/tags/v17.0.0-dev.1.tar.gz
 URL: https://github.com/alvr-org/ALVR/
 ExclusiveArch: x86_64
-BuildRequires: alsa-lib-devel cairo-gobject-devel cargo clang-devel ffmpeg-devel gcc gcc-c++ ImageMagick libunwind-devel openssl-devel rpmdevtools rust rust-atk-sys-devel rust-cairo-sys-rs-devel rust-gdk-sys-devel rust-glib-sys-devel rust-pango-sys-devel selinux-policy-devel vulkan-headers vulkan-loader-devel
+BuildRequires: alsa-lib-devel cairo-gobject-devel cargo clang-devel ffmpeg-devel gcc gcc-c++ cmake ImageMagick libunwind-devel openssl-devel rpmdevtools rust rust-atk-sys-devel rust-cairo-sys-rs-devel rust-gdk-sys-devel rust-glib-sys-devel rust-pango-sys-devel selinux-policy-devel vulkan-headers vulkan-loader-devel
 BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
 Requires: ffmpeg steam
 Requires(post): policycoreutils
