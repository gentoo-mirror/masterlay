diff -r c0363f849624 Include/pyatomic.h
--- a/Include/pyatomic.h    Thu Sep 17 22:55:40 2015 -0700
+++ b/Include/pyatomic.h    Fri Sep 18 08:50:14 2015 +0200
@@ -1,8 +1,6 @@
-/* Issue #23644: <stdatomic.h> is incompatible with C++, see:
-   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60932 */
-#if !defined(Py_LIMITED_API) && !defined(__cplusplus)
 #ifndef Py_ATOMIC_H
 #define Py_ATOMIC_H
+#ifdef Py_BUILD_CORE
 
 #include "dynamic_annotations.h"
 
@@ -248,5 +246,5 @@ static __inline__ void
 #define _Py_atomic_load_relaxed(ATOMIC_VAL) \
     _Py_atomic_load_explicit(ATOMIC_VAL, _Py_memory_order_relaxed)
 
+#endif  /* Py_BUILD_CORE */
 #endif  /* Py_ATOMIC_H */
-#endif  /* Py_LIMITED_API */
diff -r c0363f849624 Include/pystate.h
--- a/Include/pystate.h Thu Sep 17 22:55:40 2015 -0700
+++ b/Include/pystate.h Fri Sep 18 08:50:14 2015 +0200
@@ -177,20 +177,13 @@ PyAPI_FUNC(int) PyThreadState_SetAsyncEx
 /* Variable and macro for in-line access to current thread state */
 
 /* Assuming the current thread holds the GIL, this is the
-   PyThreadState for the current thread.
-
-   Issue #23644: pyatomic.h is incompatible with C++ (yet). Disable
-   PyThreadState_GET() optimization: declare it as an alias to
-   PyThreadState_Get(), as done for limited API. */
-#if !defined(Py_LIMITED_API) && !defined(__cplusplus)
+   PyThreadState for the current thread. */
+#ifdef Py_BUILD_CORE
 PyAPI_DATA(_Py_atomic_address) _PyThreadState_Current;
-#endif
-
-#if defined(Py_DEBUG) || defined(Py_LIMITED_API) || defined(__cplusplus)
-#define PyThreadState_GET() PyThreadState_Get()
+#  define PyThreadState_GET() \
+             ((PyThreadState*)_Py_atomic_load_relaxed(&_PyThreadState_Current))
 #else
-#define PyThreadState_GET() \
-    ((PyThreadState*)_Py_atomic_load_relaxed(&_PyThreadState_Current))
+#  define PyThreadState_GET() PyThreadState_Get()
 #endif
 
 typedef
